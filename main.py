import discord
from discord.ext import commands
import os
import json

# Set up intents to include necessary permissions
intents = discord.Intents.default()
intents.messages = True
intents.guilds = True
intents.dm_messages = True
intents.message_content = True  # Enable message content intent

# Create a bot instance
bot = commands.Bot(command_prefix="!", intents=intents)

# Global variables to manage channel selection and stock status
selected_channel = None
is_stock_out = False  # Track stock status

# File paths for settings and promo codes
settings_file = "settings.json"
promo_file = "promo.txt"

# Load settings from the JSON file
def load_settings():
    global selected_channel, is_stock_out
    if os.path.exists(settings_file):
        with open(settings_file, "r") as file:
            settings = json.load(file)
            selected_channel = settings.get("selected_channel")
            is_stock_out = settings.get("is_stock_out", False)

# Save settings to the JSON file
def save_settings():
    settings = {
        "selected_channel": selected_channel,
        "is_stock_out": is_stock_out
    }
    with open(settings_file, "w") as file:
        json.dump(settings, file)

# Ensure promo.txt exists, if not create it
def ensure_promo_file():
    if not os.path.exists(promo_file):
        with open(promo_file, "w") as file:
            file.write("")  # Create an empty file if it doesn't exist

# Automatically generate promo.txt and load settings when the bot starts
@bot.event
async def on_ready():
    print(f"Logged in as {bot.user}")
    load_settings()  # Load settings from the JSON file
    ensure_promo_file()  # Check and generate the promo.txt file
    print("promo.txt file ensured or created.")
    if selected_channel:
        print(f"Selected channel ID: {selected_channel}")
    print(f"Stock status: {'Out of stock' if is_stock_out else 'In stock'}")

# Command for admins to select a channel for bot commands
@bot.command(name="select")
@commands.has_permissions(administrator=True)
async def select_channel(ctx):
    global selected_channel
    selected_channel = ctx.channel.id
    save_settings()  # Save settings after selecting the channel
    await ctx.send(f"Channel <#{selected_channel}> has been selected for bot commands.")

# Command for admins to set the stock status to out of stock
@bot.command(name="stockout")
@commands.has_permissions(administrator=True)
async def stock_out(ctx):
    global is_stock_out
    is_stock_out = True
    save_settings()  # Save settings after changing stock status
    await ctx.send("Stock is now out. Users cannot request Nitro codes.")

# Command for admins to set the stock status back in stock
@bot.command(name="stockback")
@commands.has_permissions(administrator=True)
async def stock_back(ctx):
    global is_stock_out
    is_stock_out = False
    save_settings()  # Save settings after changing stock status
    await ctx.send("Stock is back in! Users can request Nitro codes again.")

# Command for admins to give a Nitro code from promo.txt
@bot.command(name="nitro")
async def give_nitro(ctx):
    global selected_channel, is_stock_out

    # Ensure the command is run in the selected channel
    if ctx.channel.id != selected_channel:
        await ctx.send("This command can only be used in the selected channel.")
        return

    # Check stock status
    if is_stock_out:
        await ctx.send("Sorry, the stock is currently out. Please try again later.")
        return

    # Ensure the user has admin privileges
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("You don't have the required permissions to use this command.")
        return

    # Ensure promo.txt exists
    ensure_promo_file()

    # Read promo codes from the file
    with open(promo_file, "r") as file:
        lines = file.readlines()

    if not lines:
        await ctx.send("No more promo codes available.")
        return

    # Get the first promo code and remove it from the file
    promo_code = lines[0].strip()
    with open(promo_file, "w") as file:
        file.writelines(lines[1:])

    # Create an embed message for the Nitro code
    embed = discord.Embed(title="Here's your Nitro Code!", description=promo_code)
    embed.set_footer(text="Generated By PlutoX")  # Add the footer to the embed

    # Send the promo code to the user via DM
    try:
        await ctx.author.send(embed=embed)
        await ctx.send(f"{ctx.author.mention}, check your DMs for the Nitro code!")
    except discord.Forbidden:
        await ctx.send(f"{ctx.author.mention}, I can't DM you the code. Please enable DMs from server members.")

# Error handler for missing permissions
@give_nitro.error
async def nitro_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("You don't have permission to use this command.")

# Start the bot
token = os.getenv("DISCORD_TOKEN")  # Fetch token from environment variable
bot.run(token)
